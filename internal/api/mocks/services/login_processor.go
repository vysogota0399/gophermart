// Code generated by MockGen. DO NOT EDIT.
// Source: gophermart/internal/api/services (interfaces: LoginProcessor)

// Package services is a generated GoMock package.
package services

import (
	context "context"
	models "github.com/vysogota0399/gophermart_portal/internal/api/models"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLoginProcessor is a mock of LoginProcessor interface.
type MockLoginProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockLoginProcessorMockRecorder
}

// MockLoginProcessorMockRecorder is the mock recorder for MockLoginProcessor.
type MockLoginProcessorMockRecorder struct {
	mock *MockLoginProcessor
}

// NewMockLoginProcessor creates a new mock instance.
func NewMockLoginProcessor(ctrl *gomock.Controller) *MockLoginProcessor {
	mock := &MockLoginProcessor{ctrl: ctrl}
	mock.recorder = &MockLoginProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginProcessor) EXPECT() *MockLoginProcessorMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockLoginProcessor) Call(arg0 context.Context, arg1 http.ResponseWriter, arg2 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockLoginProcessorMockRecorder) Call(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockLoginProcessor)(nil).Call), arg0, arg1, arg2)
}
